import request = require('request');
import promise = require('bluebird');
import http = require('http');

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

/**
* Free service (with registration) which serves Government Do Not Call data via API \n            Search via phone number returns available data, reported name, total complaints
*/
export class DoNotCallComplaints {
    /**
    * Reported Caller Name
    */
    reportedCallerName: string;
    totalNumberOfComplaints: number;
    complaintsByGovEntity: { [key: string]: number; };
    lastCompaintDate: Date;
    tags: Array<string>;
}

export class Reputation {
    callType: string;
    confidence: number;
    isSpam: boolean;
    lastCompaintDate: Date;
    reportedCallerName: string;
    tags: Array<string>;
}

/**
* Call Report\n            PhoneNumber, \n            Caller name(optional), \n            Call category(optional), \n            Comment or tags(free text) (optional), \n            Unwanted call  - yes/no(optional),
*/
export class CallReport {
    phoneNumber: string;
    reportedCallerName: string;
    reportedCallerId: string;
    callerType: CallReport.CallerTypeEnum;
    comment: string;
    unwantedCall: boolean;
    callTime: Date;
}

export namespace CallReport {
    export enum CallerTypeEnum { 
        Unknown = <any> 'Unknown',
        Telemarketing = <any> 'Telemarketing',
        Collection_Agency = <any> 'Collection_Agency',
        Political = <any> 'Political',
        Surveyor = <any> 'Surveyor',
        Prank_Call = <any> 'Prank_Call',
        Fund_Raiser = <any> 'Fund_Raiser',
        Other_Commercial = <any> 'Other_Commercial',
        Scam = <any> 'Scam',
        Pay_Phone = <any> 'Pay_Phone',
        Business = <any> 'Business',
        Reminder_Notification_Call = <any> 'Reminder_Notification_Call',
        Junk_Fax = <any> 'Junk_Fax',
        Fax_Machine = <any> 'Fax_Machine',
        Spam_Text = <any> 'Spam_Text',
        RoboCall = <any> 'RoboCall',
        NotSpam = <any> 'NotSpam',
        Callback = <any> 'Callback',
    }
}

interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

class OAuth implements Authentication {
    applyToRequest(requestOptions: request.Options): void {
        // TODO: support oauth
    }
}

class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export class ReputationApi {
    protected basePath = 'https://www.callcontrol.com';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'apiKey'),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set apiKey(key: string) {
        this.authentications.apiKey.apiKey = key;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    public reputationReport (callReport: CallReport) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const path = this.url + this.basePath + '/api/2015-11-01/Report';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'callReport' is set
        if (!callReport) {
            throw new Error('Missing required parameter callReport when calling reputationReport');
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body?: any;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: callReport,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }

    public reputationReputation (phoneNumber: string) : Promise<{ response: http.ClientResponse; body: Reputation;  }> {
        const path = this.url + this.basePath + '/api/2015-11-01/Reputation/{phoneNumber}'
            .replace('{' + 'phoneNumber' + '}', String(phoneNumber));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'phoneNumber' is set
        if (!phoneNumber) {
            throw new Error('Missing required parameter phoneNumber when calling reputationReputation');
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Reputation;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class DoNotCallComplaintsApi {
    protected basePath = 'https://www.callcontrol.com';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'apiKey'),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set apiKey(key: string) {
        this.authentications.apiKey.apiKey = key;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    public doNotCallComplaintsDoNotCallComplaints (phoneNumber: string) : Promise<{ response: http.ClientResponse; body: DoNotCallComplaints;  }> {
        const path = this.url + this.basePath + '/api/2015-11-01/DoNotCallComplaints/{phoneNumber}'
            .replace('{' + 'phoneNumber' + '}', String(phoneNumber));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'phoneNumber' is set
        if (!phoneNumber) {
            throw new Error('Missing required parameter phoneNumber when calling doNotCallComplaintsDoNotCallComplaints');
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: DoNotCallComplaints;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
