=begin
Call Control API

API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.

OpenAPI spec version: 2015-11-01
Contact: info@kedlin.com
Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  # Call Report\r\n            PhoneNumber, \r\n            Caller name(optional), \r\n            Call category(optional), \r\n            Comment or tags(free text) (optional), \r\n            Unwanted call  - yes/no(optional),
  class CallReport
    attr_accessor :phone_number

    attr_accessor :reported_caller_name

    attr_accessor :reported_caller_id

    attr_accessor :caller_type

    attr_accessor :comment

    attr_accessor :unwanted_call

    attr_accessor :call_time

    attr_accessor :reporter

    attr_accessor :ip_address

    attr_accessor :latitude

    attr_accessor :longitude

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'phone_number' => :'PhoneNumber',
        
        :'reported_caller_name' => :'ReportedCallerName',
        
        :'reported_caller_id' => :'ReportedCallerId',
        
        :'caller_type' => :'CallerType',
        
        :'comment' => :'Comment',
        
        :'unwanted_call' => :'UnwantedCall',
        
        :'call_time' => :'CallTime',
        
        :'reporter' => :'Reporter',
        
        :'ip_address' => :'IpAddress',
        
        :'latitude' => :'Latitude',
        
        :'longitude' => :'Longitude'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'phone_number' => :'String',
        :'reported_caller_name' => :'String',
        :'reported_caller_id' => :'String',
        :'caller_type' => :'String',
        :'comment' => :'String',
        :'unwanted_call' => :'BOOLEAN',
        :'call_time' => :'DateTime',
        :'reporter' => :'String',
        :'ip_address' => :'String',
        :'latitude' => :'Float',
        :'longitude' => :'Float'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'PhoneNumber']
        self.phone_number = attributes[:'PhoneNumber']
      end
      
      if attributes[:'ReportedCallerName']
        self.reported_caller_name = attributes[:'ReportedCallerName']
      end
      
      if attributes[:'ReportedCallerId']
        self.reported_caller_id = attributes[:'ReportedCallerId']
      end
      
      if attributes[:'CallerType']
        self.caller_type = attributes[:'CallerType']
      end
      
      if attributes[:'Comment']
        self.comment = attributes[:'Comment']
      end
      
      if attributes[:'UnwantedCall']
        self.unwanted_call = attributes[:'UnwantedCall']
      end
      
      if attributes[:'CallTime']
        self.call_time = attributes[:'CallTime']
      end
      
      if attributes[:'Reporter']
        self.reporter = attributes[:'Reporter']
      end
      
      if attributes[:'IpAddress']
        self.ip_address = attributes[:'IpAddress']
      end
      
      if attributes[:'Latitude']
        self.latitude = attributes[:'Latitude']
      end
      
      if attributes[:'Longitude']
        self.longitude = attributes[:'Longitude']
      end
      
    end

    # Custom attribute writer method checking allowed values (enum).
    def caller_type=(caller_type)
      allowed_values = ["Unknown", "Telemarketing", "Collection_Agency", "Political", "Surveyor", "Prank_Call", "Fund_Raiser", "Other_Commercial", "Scam", "VOIP", "Business", "Reminder_Notification_Call", "Junk_Fax", "Fax_Machine", "Spam_Text", "RoboCall", "NotSpam", "Callback"]
      if caller_type && !allowed_values.include?(caller_type)
        fail "invalid value for 'caller_type', must be one of #{allowed_values}"
      end
      @caller_type = caller_type
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          phone_number == o.phone_number &&
          reported_caller_name == o.reported_caller_name &&
          reported_caller_id == o.reported_caller_id &&
          caller_type == o.caller_type &&
          comment == o.comment &&
          unwanted_call == o.unwanted_call &&
          call_time == o.call_time &&
          reporter == o.reporter &&
          ip_address == o.ip_address &&
          latitude == o.latitude &&
          longitude == o.longitude
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [phone_number, reported_caller_name, reported_caller_id, caller_type, comment, unwanted_call, call_time, reporter, ip_address, latitude, longitude].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
