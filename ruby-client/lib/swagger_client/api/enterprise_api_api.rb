=begin
Call Control API

API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.

OpenAPI spec version: 2015-11-01
Contact: info@kedlin.com
Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class EnterpriseApiApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Enterprise  GET: GetBlockList\r\n            Simple Enteprise which returns the current and complete list of numbers that the network is blocking
    # All \r\n            Try with api_key 'demo' for the demo block list (which will block 18008472911, 13157244022, 17275567300, 18008276655) but not 12061231234
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cached 
    # @return [Array<String>]
    def enterprise_api_get_block_list(opts = {})
      data, status_code, headers = enterprise_api_get_block_list_with_http_info(opts)
      return data
    end

    # Enterprise  GET: GetBlockList\r\n            Simple Enteprise which returns the current and complete list of numbers that the network is blocking
    # All \r\n            Try with api_key &#39;demo&#39; for the demo block list (which will block 18008472911, 13157244022, 17275567300, 18008276655) but not 12061231234
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cached 
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def enterprise_api_get_block_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EnterpriseApiApi#enterprise_api_get_block_list ..."
      end
      
      # resource path
      local_var_path = "/api/2015-11-01/Enterprise/GetBlockList".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'cached'] = opts[:'cached'] if opts[:'cached']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseApiApi#enterprise_api_get_block_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enterprise  GET: GetUser\r\n            Returns the current information from the user
    # 
    # @param phone_number 
    # @param [Hash] opts the optional parameters
    # @return [CallControlUser]
    def enterprise_api_get_user(phone_number, opts = {})
      data, status_code, headers = enterprise_api_get_user_with_http_info(phone_number, opts)
      return data
    end

    # Enterprise  GET: GetUser\r\n            Returns the current information from the user
    # 
    # @param phone_number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallControlUser, Fixnum, Hash)>] CallControlUser data, response status code and response headers
    def enterprise_api_get_user_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EnterpriseApiApi#enterprise_api_get_user ..."
      end
      
      # verify the required parameter 'phone_number' is set
      fail "Missing the required parameter 'phone_number' when calling enterprise_api_get_user" if phone_number.nil?
      
      # resource path
      local_var_path = "/api/2015-11-01/Enterprise/GetUser/{phoneNumber}".sub('{format}','json').sub('{' + 'phoneNumber' + '}', phone_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CallControlUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseApiApi#enterprise_api_get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enterprise  GET: ShouldBlock\r\n            Simple Enteprise which returns a call block proceed decision.
    # This returns information required to perform basic call blocking behaviors\r\n            Try with api_key 'demo' and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param phone_number phone number to search
    # @param user_phone_number (OPTOPNAL) phone number of user to look up block rules
    # @param [Hash] opts the optional parameters
    # @return [String]
    def enterprise_api_should_block(phone_number, user_phone_number, opts = {})
      data, status_code, headers = enterprise_api_should_block_with_http_info(phone_number, user_phone_number, opts)
      return data
    end

    # Enterprise  GET: ShouldBlock\r\n            Simple Enteprise which returns a call block proceed decision.
    # This returns information required to perform basic call blocking behaviors\r\n            Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param phone_number phone number to search
    # @param user_phone_number (OPTOPNAL) phone number of user to look up block rules
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def enterprise_api_should_block_with_http_info(phone_number, user_phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EnterpriseApiApi#enterprise_api_should_block ..."
      end
      
      # verify the required parameter 'phone_number' is set
      fail "Missing the required parameter 'phone_number' when calling enterprise_api_should_block" if phone_number.nil?
      
      # verify the required parameter 'user_phone_number' is set
      fail "Missing the required parameter 'user_phone_number' when calling enterprise_api_should_block" if user_phone_number.nil?
      
      # resource path
      local_var_path = "/api/2015-11-01/Enterprise/ShouldBlock/{phoneNumber}/{userPhoneNumber}".sub('{format}','json').sub('{' + 'phoneNumber' + '}', phone_number.to_s).sub('{' + 'userPhoneNumber' + '}', user_phone_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseApiApi#enterprise_api_should_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def enterprise_api_upsert_user(user, opts = {})
      data, status_code, headers = enterprise_api_upsert_user_with_http_info(user, opts)
      return data
    end

    # 
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def enterprise_api_upsert_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EnterpriseApiApi#enterprise_api_upsert_user ..."
      end
      
      # verify the required parameter 'user' is set
      fail "Missing the required parameter 'user' when calling enterprise_api_upsert_user" if user.nil?
      
      # resource path
      local_var_path = "/api/2015-11-01/Enterprise/UpsertUser".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnterpriseApiApi#enterprise_api_upsert_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
