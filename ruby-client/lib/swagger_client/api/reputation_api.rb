=begin
Call Control API

API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.

OpenAPI spec version: 2015-11-01
Contact: info@kedlin.com
Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class ReputationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Report: report spam calls received to better tune our algorithms based upon spam calls you receive
    # This returns information required to perform basic call blocking behaviors&lt;br /&gt;\r\n            Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param call_report [FromBody] Call Report\r\n            PhoneNumber, \r\n            Caller name(optional), \r\n            Call category(optional), \r\n            Comment or tags(free text) (optional), \r\n            Unwanted call  - yes/no(optional),
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reputation_report(call_report, opts = {})
      reputation_report_with_http_info(call_report, opts)
      return nil
    end

    # Report: report spam calls received to better tune our algorithms based upon spam calls you receive
    # This returns information required to perform basic call blocking behaviors&lt;br /&gt;\r\n            Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param call_report [FromBody] Call Report\r\n            PhoneNumber, \r\n            Caller name(optional), \r\n            Call category(optional), \r\n            Comment or tags(free text) (optional), \r\n            Unwanted call  - yes/no(optional),
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reputation_report_with_http_info(call_report, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReputationApi#reputation_report ..."
      end
      
      # verify the required parameter 'call_report' is set
      fail "Missing the required parameter 'call_report' when calling reputation_report" if call_report.nil?
      
      # resource path
      path = "/api/2015-11-01/Report".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(call_report)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReputationApi#reputation_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reputation:\r\n            Premium service which returns a reputation informaiton of a phone number via API.
    # This returns information required to perform basic call blocking behaviors&lt;br /&gt;\r\n            Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param phone_number phone number to search
    # @param [Hash] opts the optional parameters
    # @return [Reputation]
    def reputation_reputation(phone_number, opts = {})
      data, status_code, headers = reputation_reputation_with_http_info(phone_number, opts)
      return data
    end

    # Reputation:\r\n            Premium service which returns a reputation informaiton of a phone number via API.
    # This returns information required to perform basic call blocking behaviors&lt;br /&gt;\r\n            Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param phone_number phone number to search
    # @param [Hash] opts the optional parameters
    # @return [Array<(Reputation, Fixnum, Hash)>] Reputation data, response status code and response headers
    def reputation_reputation_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReputationApi#reputation_reputation ..."
      end
      
      # verify the required parameter 'phone_number' is set
      fail "Missing the required parameter 'phone_number' when calling reputation_reputation" if phone_number.nil?
      
      # resource path
      path = "/api/2015-11-01/Reputation/{phoneNumber}".sub('{format}','json').sub('{' + 'phoneNumber' + '}', phone_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Reputation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReputationApi#reputation_reputation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
