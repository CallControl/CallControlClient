=begin
Call Control API

API for blocking phone calls with Call Control. Data is from crowdsourced community blacklist from 12+ million users and government agencies (FTC, FCC, IRS) Try with api_key 'demo', hit explore above, and then try phone numbers 18008472911,13157244022,17275567300,18008276655,12061231234.

OpenAPI spec version: 2015-11-01
Contact: info@kedlin.com
Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class ComplaintsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Complaints: Free service (with registration), providing community and government complaint lookup by phone number for up to 2,000 queries per month.  Details include number complaint rates from (FTC, FCC, IRS, Indiana Attorney  General) and key entity tag extractions from complaints.
    # This is the main funciton to get data out of the call control reporting system<br />\r\n            Try with api_key 'demo' and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param phone_number phone number to search
    # @param [Hash] opts the optional parameters
    # @return [Complaints]
    def complaints_complaints(phone_number, opts = {})
      data, status_code, headers = complaints_complaints_with_http_info(phone_number, opts)
      return data
    end

    # Complaints: Free service (with registration), providing community and government complaint lookup by phone number for up to 2,000 queries per month.  Details include number complaint rates from (FTC, FCC, IRS, Indiana Attorney  General) and key entity tag extractions from complaints.
    # This is the main funciton to get data out of the call control reporting system&lt;br /&gt;\r\n            Try with api_key &#39;demo&#39; and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)
    # @param phone_number phone number to search
    # @param [Hash] opts the optional parameters
    # @return [Array<(Complaints, Fixnum, Hash)>] Complaints data, response status code and response headers
    def complaints_complaints_with_http_info(phone_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ComplaintsApi#complaints_complaints ..."
      end
      
      # verify the required parameter 'phone_number' is set
      fail "Missing the required parameter 'phone_number' when calling complaints_complaints" if phone_number.nil?
      
      # resource path
      local_var_path = "/api/2015-11-01/Complaints/{phoneNumber}".sub('{format}','json').sub('{' + 'phoneNumber' + '}', phone_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Complaints')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComplaintsApi#complaints_complaints\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
