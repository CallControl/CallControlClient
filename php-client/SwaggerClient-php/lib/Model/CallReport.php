<?php
/**
 * CallReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * CallReport Class Doc Comment
 *
 * @category    Class
 * @description Call Report\r\n            PhoneNumber, \r\n            Caller name(optional), \r\n            Call category(optional), \r\n            Comment or tags(free text) (optional), \r\n            Unwanted call  - yes/no(optional),
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CallReport implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'phone_number' => 'string',
        'reported_caller_name' => 'string',
        'reported_caller_id' => 'string',
        'caller_type' => 'string',
        'comment' => 'string',
        'unwanted_call' => 'bool',
        'call_time' => '\DateTime',
        'reporter' => 'string',
        'ip_address' => 'string',
        'latitude' => 'double',
        'longitude' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'phone_number' => 'PhoneNumber',
        'reported_caller_name' => 'ReportedCallerName',
        'reported_caller_id' => 'ReportedCallerId',
        'caller_type' => 'CallerType',
        'comment' => 'Comment',
        'unwanted_call' => 'UnwantedCall',
        'call_time' => 'CallTime',
        'reporter' => 'Reporter',
        'ip_address' => 'IpAddress',
        'latitude' => 'Latitude',
        'longitude' => 'Longitude'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'phone_number' => 'setPhoneNumber',
        'reported_caller_name' => 'setReportedCallerName',
        'reported_caller_id' => 'setReportedCallerId',
        'caller_type' => 'setCallerType',
        'comment' => 'setComment',
        'unwanted_call' => 'setUnwantedCall',
        'call_time' => 'setCallTime',
        'reporter' => 'setReporter',
        'ip_address' => 'setIpAddress',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'phone_number' => 'getPhoneNumber',
        'reported_caller_name' => 'getReportedCallerName',
        'reported_caller_id' => 'getReportedCallerId',
        'caller_type' => 'getCallerType',
        'comment' => 'getComment',
        'unwanted_call' => 'getUnwantedCall',
        'call_time' => 'getCallTime',
        'reporter' => 'getReporter',
        'ip_address' => 'getIpAddress',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude'
    );
  
    
    /**
      * $phone_number 
      * @var string
      */
    protected $phone_number;
    
    /**
      * $reported_caller_name 
      * @var string
      */
    protected $reported_caller_name;
    
    /**
      * $reported_caller_id 
      * @var string
      */
    protected $reported_caller_id;
    
    /**
      * $caller_type 
      * @var string
      */
    protected $caller_type;
    
    /**
      * $comment 
      * @var string
      */
    protected $comment;
    
    /**
      * $unwanted_call 
      * @var bool
      */
    protected $unwanted_call;
    
    /**
      * $call_time 
      * @var \DateTime
      */
    protected $call_time;
    
    /**
      * $reporter 
      * @var string
      */
    protected $reporter;
    
    /**
      * $ip_address 
      * @var string
      */
    protected $ip_address;
    
    /**
      * $latitude 
      * @var double
      */
    protected $latitude;
    
    /**
      * $longitude 
      * @var double
      */
    protected $longitude;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->phone_number = $data["phone_number"];
            $this->reported_caller_name = $data["reported_caller_name"];
            $this->reported_caller_id = $data["reported_caller_id"];
            $this->caller_type = $data["caller_type"];
            $this->comment = $data["comment"];
            $this->unwanted_call = $data["unwanted_call"];
            $this->call_time = $data["call_time"];
            $this->reporter = $data["reporter"];
            $this->ip_address = $data["ip_address"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
        }
    }
    
    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->phone_number;
    }
  
    /**
     * Sets phone_number
     * @param string $phone_number 
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        
        $this->phone_number = $phone_number;
        return $this;
    }
    
    /**
     * Gets reported_caller_name
     * @return string
     */
    public function getReportedCallerName()
    {
        return $this->reported_caller_name;
    }
  
    /**
     * Sets reported_caller_name
     * @param string $reported_caller_name 
     * @return $this
     */
    public function setReportedCallerName($reported_caller_name)
    {
        
        $this->reported_caller_name = $reported_caller_name;
        return $this;
    }
    
    /**
     * Gets reported_caller_id
     * @return string
     */
    public function getReportedCallerId()
    {
        return $this->reported_caller_id;
    }
  
    /**
     * Sets reported_caller_id
     * @param string $reported_caller_id 
     * @return $this
     */
    public function setReportedCallerId($reported_caller_id)
    {
        
        $this->reported_caller_id = $reported_caller_id;
        return $this;
    }
    
    /**
     * Gets caller_type
     * @return string
     */
    public function getCallerType()
    {
        return $this->caller_type;
    }
  
    /**
     * Sets caller_type
     * @param string $caller_type 
     * @return $this
     */
    public function setCallerType($caller_type)
    {
        $allowed_values = array("Unknown", "Telemarketing", "Collection_Agency", "Political", "Surveyor", "Prank_Call", "Fund_Raiser", "Other_Commercial", "Scam", "VOIP", "Business", "Reminder_Notification_Call", "Junk_Fax", "Fax_Machine", "Spam_Text", "RoboCall", "NotSpam", "Callback");
        if (!in_array($caller_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'caller_type', must be one of 'Unknown', 'Telemarketing', 'Collection_Agency', 'Political', 'Surveyor', 'Prank_Call', 'Fund_Raiser', 'Other_Commercial', 'Scam', 'VOIP', 'Business', 'Reminder_Notification_Call', 'Junk_Fax', 'Fax_Machine', 'Spam_Text', 'RoboCall', 'NotSpam', 'Callback'");
        }
        $this->caller_type = $caller_type;
        return $this;
    }
    
    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->comment;
    }
  
    /**
     * Sets comment
     * @param string $comment 
     * @return $this
     */
    public function setComment($comment)
    {
        
        $this->comment = $comment;
        return $this;
    }
    
    /**
     * Gets unwanted_call
     * @return bool
     */
    public function getUnwantedCall()
    {
        return $this->unwanted_call;
    }
  
    /**
     * Sets unwanted_call
     * @param bool $unwanted_call 
     * @return $this
     */
    public function setUnwantedCall($unwanted_call)
    {
        
        $this->unwanted_call = $unwanted_call;
        return $this;
    }
    
    /**
     * Gets call_time
     * @return \DateTime
     */
    public function getCallTime()
    {
        return $this->call_time;
    }
  
    /**
     * Sets call_time
     * @param \DateTime $call_time 
     * @return $this
     */
    public function setCallTime($call_time)
    {
        
        $this->call_time = $call_time;
        return $this;
    }
    
    /**
     * Gets reporter
     * @return string
     */
    public function getReporter()
    {
        return $this->reporter;
    }
  
    /**
     * Sets reporter
     * @param string $reporter 
     * @return $this
     */
    public function setReporter($reporter)
    {
        
        $this->reporter = $reporter;
        return $this;
    }
    
    /**
     * Gets ip_address
     * @return string
     */
    public function getIpAddress()
    {
        return $this->ip_address;
    }
  
    /**
     * Sets ip_address
     * @param string $ip_address 
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        
        $this->ip_address = $ip_address;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return double
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param double $latitude 
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return double
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param double $longitude 
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
