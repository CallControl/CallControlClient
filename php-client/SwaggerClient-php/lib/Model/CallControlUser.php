<?php
/**
 * CallControlUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * CallControlUser Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CallControlUser implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'phone_number' => 'string',
        'phone_numbe_region' => 'string',
        'white_list' => 'string[]',
        'black_list' => 'string[]',
        'quiet_hour_list' => '\Swagger\Client\Model\QuietHour[]',
        'use_community_blacklist' => 'bool',
        'break_through_qh_with_multiple_calls' => 'bool',
        'white_list_breaks_qh' => 'bool',
        'block_behavior' => 'string',
        'email' => 'string',
        'age' => 'int',
        'gender' => 'string',
        'salutation' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'suffix' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'phone_number' => 'PhoneNumber',
        'phone_numbe_region' => 'PhoneNumbeRegion',
        'white_list' => 'WhiteList',
        'black_list' => 'BlackList',
        'quiet_hour_list' => 'QuietHourList',
        'use_community_blacklist' => 'UseCommunityBlacklist',
        'break_through_qh_with_multiple_calls' => 'BreakThroughQhWithMultipleCalls',
        'white_list_breaks_qh' => 'WhiteListBreaksQh',
        'block_behavior' => 'BlockBehavior',
        'email' => 'Email',
        'age' => 'Age',
        'gender' => 'Gender',
        'salutation' => 'Salutation',
        'first_name' => 'FirstName',
        'middle_name' => 'MiddleName',
        'last_name' => 'LastName',
        'suffix' => 'Suffix'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'phone_number' => 'setPhoneNumber',
        'phone_numbe_region' => 'setPhoneNumbeRegion',
        'white_list' => 'setWhiteList',
        'black_list' => 'setBlackList',
        'quiet_hour_list' => 'setQuietHourList',
        'use_community_blacklist' => 'setUseCommunityBlacklist',
        'break_through_qh_with_multiple_calls' => 'setBreakThroughQhWithMultipleCalls',
        'white_list_breaks_qh' => 'setWhiteListBreaksQh',
        'block_behavior' => 'setBlockBehavior',
        'email' => 'setEmail',
        'age' => 'setAge',
        'gender' => 'setGender',
        'salutation' => 'setSalutation',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'suffix' => 'setSuffix'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'phone_number' => 'getPhoneNumber',
        'phone_numbe_region' => 'getPhoneNumbeRegion',
        'white_list' => 'getWhiteList',
        'black_list' => 'getBlackList',
        'quiet_hour_list' => 'getQuietHourList',
        'use_community_blacklist' => 'getUseCommunityBlacklist',
        'break_through_qh_with_multiple_calls' => 'getBreakThroughQhWithMultipleCalls',
        'white_list_breaks_qh' => 'getWhiteListBreaksQh',
        'block_behavior' => 'getBlockBehavior',
        'email' => 'getEmail',
        'age' => 'getAge',
        'gender' => 'getGender',
        'salutation' => 'getSalutation',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'suffix' => 'getSuffix'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $phone_number 
      * @var string
      */
    protected $phone_number;
    
    /**
      * $phone_numbe_region 
      * @var string
      */
    protected $phone_numbe_region;
    
    /**
      * $white_list 
      * @var string[]
      */
    protected $white_list;
    
    /**
      * $black_list 
      * @var string[]
      */
    protected $black_list;
    
    /**
      * $quiet_hour_list 
      * @var \Swagger\Client\Model\QuietHour[]
      */
    protected $quiet_hour_list;
    
    /**
      * $use_community_blacklist 
      * @var bool
      */
    protected $use_community_blacklist;
    
    /**
      * $break_through_qh_with_multiple_calls 
      * @var bool
      */
    protected $break_through_qh_with_multiple_calls;
    
    /**
      * $white_list_breaks_qh 
      * @var bool
      */
    protected $white_list_breaks_qh;
    
    /**
      * $block_behavior 
      * @var string
      */
    protected $block_behavior;
    
    /**
      * $email 
      * @var string
      */
    protected $email;
    
    /**
      * $age 
      * @var int
      */
    protected $age;
    
    /**
      * $gender 
      * @var string
      */
    protected $gender;
    
    /**
      * $salutation 
      * @var string
      */
    protected $salutation;
    
    /**
      * $first_name 
      * @var string
      */
    protected $first_name;
    
    /**
      * $middle_name 
      * @var string
      */
    protected $middle_name;
    
    /**
      * $last_name 
      * @var string
      */
    protected $last_name;
    
    /**
      * $suffix 
      * @var string
      */
    protected $suffix;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->phone_number = $data["phone_number"];
            $this->phone_numbe_region = $data["phone_numbe_region"];
            $this->white_list = $data["white_list"];
            $this->black_list = $data["black_list"];
            $this->quiet_hour_list = $data["quiet_hour_list"];
            $this->use_community_blacklist = $data["use_community_blacklist"];
            $this->break_through_qh_with_multiple_calls = $data["break_through_qh_with_multiple_calls"];
            $this->white_list_breaks_qh = $data["white_list_breaks_qh"];
            $this->block_behavior = $data["block_behavior"];
            $this->email = $data["email"];
            $this->age = $data["age"];
            $this->gender = $data["gender"];
            $this->salutation = $data["salutation"];
            $this->first_name = $data["first_name"];
            $this->middle_name = $data["middle_name"];
            $this->last_name = $data["last_name"];
            $this->suffix = $data["suffix"];
        }
    }
    
    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->phone_number;
    }
  
    /**
     * Sets phone_number
     * @param string $phone_number 
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        
        $this->phone_number = $phone_number;
        return $this;
    }
    
    /**
     * Gets phone_numbe_region
     * @return string
     */
    public function getPhoneNumbeRegion()
    {
        return $this->phone_numbe_region;
    }
  
    /**
     * Sets phone_numbe_region
     * @param string $phone_numbe_region 
     * @return $this
     */
    public function setPhoneNumbeRegion($phone_numbe_region)
    {
        
        $this->phone_numbe_region = $phone_numbe_region;
        return $this;
    }
    
    /**
     * Gets white_list
     * @return string[]
     */
    public function getWhiteList()
    {
        return $this->white_list;
    }
  
    /**
     * Sets white_list
     * @param string[] $white_list 
     * @return $this
     */
    public function setWhiteList($white_list)
    {
        
        $this->white_list = $white_list;
        return $this;
    }
    
    /**
     * Gets black_list
     * @return string[]
     */
    public function getBlackList()
    {
        return $this->black_list;
    }
  
    /**
     * Sets black_list
     * @param string[] $black_list 
     * @return $this
     */
    public function setBlackList($black_list)
    {
        
        $this->black_list = $black_list;
        return $this;
    }
    
    /**
     * Gets quiet_hour_list
     * @return \Swagger\Client\Model\QuietHour[]
     */
    public function getQuietHourList()
    {
        return $this->quiet_hour_list;
    }
  
    /**
     * Sets quiet_hour_list
     * @param \Swagger\Client\Model\QuietHour[] $quiet_hour_list 
     * @return $this
     */
    public function setQuietHourList($quiet_hour_list)
    {
        
        $this->quiet_hour_list = $quiet_hour_list;
        return $this;
    }
    
    /**
     * Gets use_community_blacklist
     * @return bool
     */
    public function getUseCommunityBlacklist()
    {
        return $this->use_community_blacklist;
    }
  
    /**
     * Sets use_community_blacklist
     * @param bool $use_community_blacklist 
     * @return $this
     */
    public function setUseCommunityBlacklist($use_community_blacklist)
    {
        
        $this->use_community_blacklist = $use_community_blacklist;
        return $this;
    }
    
    /**
     * Gets break_through_qh_with_multiple_calls
     * @return bool
     */
    public function getBreakThroughQhWithMultipleCalls()
    {
        return $this->break_through_qh_with_multiple_calls;
    }
  
    /**
     * Sets break_through_qh_with_multiple_calls
     * @param bool $break_through_qh_with_multiple_calls 
     * @return $this
     */
    public function setBreakThroughQhWithMultipleCalls($break_through_qh_with_multiple_calls)
    {
        
        $this->break_through_qh_with_multiple_calls = $break_through_qh_with_multiple_calls;
        return $this;
    }
    
    /**
     * Gets white_list_breaks_qh
     * @return bool
     */
    public function getWhiteListBreaksQh()
    {
        return $this->white_list_breaks_qh;
    }
  
    /**
     * Sets white_list_breaks_qh
     * @param bool $white_list_breaks_qh 
     * @return $this
     */
    public function setWhiteListBreaksQh($white_list_breaks_qh)
    {
        
        $this->white_list_breaks_qh = $white_list_breaks_qh;
        return $this;
    }
    
    /**
     * Gets block_behavior
     * @return string
     */
    public function getBlockBehavior()
    {
        return $this->block_behavior;
    }
  
    /**
     * Sets block_behavior
     * @param string $block_behavior 
     * @return $this
     */
    public function setBlockBehavior($block_behavior)
    {
        $allowed_values = array("allow", "voiceMail", "block");
        if (!in_array($block_behavior, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'block_behavior', must be one of 'allow', 'voiceMail', 'block'");
        }
        $this->block_behavior = $block_behavior;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets age
     * @return int
     */
    public function getAge()
    {
        return $this->age;
    }
  
    /**
     * Sets age
     * @param int $age 
     * @return $this
     */
    public function setAge($age)
    {
        
        $this->age = $age;
        return $this;
    }
    
    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->gender;
    }
  
    /**
     * Sets gender
     * @param string $gender 
     * @return $this
     */
    public function setGender($gender)
    {
        
        $this->gender = $gender;
        return $this;
    }
    
    /**
     * Gets salutation
     * @return string
     */
    public function getSalutation()
    {
        return $this->salutation;
    }
  
    /**
     * Sets salutation
     * @param string $salutation 
     * @return $this
     */
    public function setSalutation($salutation)
    {
        
        $this->salutation = $salutation;
        return $this;
    }
    
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name 
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    
    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->middle_name;
    }
  
    /**
     * Sets middle_name
     * @param string $middle_name 
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        
        $this->middle_name = $middle_name;
        return $this;
    }
    
    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }
  
    /**
     * Sets last_name
     * @param string $last_name 
     * @return $this
     */
    public function setLastName($last_name)
    {
        
        $this->last_name = $last_name;
        return $this;
    }
    
    /**
     * Gets suffix
     * @return string
     */
    public function getSuffix()
    {
        return $this->suffix;
    }
  
    /**
     * Sets suffix
     * @param string $suffix 
     * @return $this
     */
    public function setSuffix($suffix)
    {
        
        $this->suffix = $suffix;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
