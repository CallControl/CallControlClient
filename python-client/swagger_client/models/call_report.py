# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CallReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CallReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'phone_number': 'str',
            'reported_caller_name': 'str',
            'reported_caller_id': 'str',
            'caller_type': 'str',
            'comment': 'str',
            'unwanted_call': 'bool',
            'call_time': 'datetime',
            'reporter': 'str',
            'reporter_loation': 'ReporterLoation'
        }

        self.attribute_map = {
            'phone_number': 'PhoneNumber',
            'reported_caller_name': 'ReportedCallerName',
            'reported_caller_id': 'ReportedCallerId',
            'caller_type': 'CallerType',
            'comment': 'Comment',
            'unwanted_call': 'UnwantedCall',
            'call_time': 'CallTime',
            'reporter': 'Reporter',
            'reporter_loation': 'ReporterLoation'
        }

        self._phone_number = None
        self._reported_caller_name = None
        self._reported_caller_id = None
        self._caller_type = None
        self._comment = None
        self._unwanted_call = None
        self._call_time = None
        self._reporter = None
        self._reporter_loation = None

    @property
    def phone_number(self):
        """
        Gets the phone_number of this CallReport.


        :return: The phone_number of this CallReport.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this CallReport.


        :param phone_number: The phone_number of this CallReport.
        :type: str
        """
        self._phone_number = phone_number

    @property
    def reported_caller_name(self):
        """
        Gets the reported_caller_name of this CallReport.


        :return: The reported_caller_name of this CallReport.
        :rtype: str
        """
        return self._reported_caller_name

    @reported_caller_name.setter
    def reported_caller_name(self, reported_caller_name):
        """
        Sets the reported_caller_name of this CallReport.


        :param reported_caller_name: The reported_caller_name of this CallReport.
        :type: str
        """
        self._reported_caller_name = reported_caller_name

    @property
    def reported_caller_id(self):
        """
        Gets the reported_caller_id of this CallReport.


        :return: The reported_caller_id of this CallReport.
        :rtype: str
        """
        return self._reported_caller_id

    @reported_caller_id.setter
    def reported_caller_id(self, reported_caller_id):
        """
        Sets the reported_caller_id of this CallReport.


        :param reported_caller_id: The reported_caller_id of this CallReport.
        :type: str
        """
        self._reported_caller_id = reported_caller_id

    @property
    def caller_type(self):
        """
        Gets the caller_type of this CallReport.


        :return: The caller_type of this CallReport.
        :rtype: str
        """
        return self._caller_type

    @caller_type.setter
    def caller_type(self, caller_type):
        """
        Sets the caller_type of this CallReport.


        :param caller_type: The caller_type of this CallReport.
        :type: str
        """
        allowed_values = ["Unknown", "Telemarketing", "Collection_Agency", "Political", "Surveyor", "Prank_Call", "Fund_Raiser", "Other_Commercial", "Scam", "Pay_Phone", "Business", "Reminder_Notification_Call", "Junk_Fax", "Fax_Machine", "Spam_Text", "RoboCall", "NotSpam", "Callback"]
        if caller_type not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._caller_type = caller_type

    @property
    def comment(self):
        """
        Gets the comment of this CallReport.


        :return: The comment of this CallReport.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this CallReport.


        :param comment: The comment of this CallReport.
        :type: str
        """
        self._comment = comment

    @property
    def unwanted_call(self):
        """
        Gets the unwanted_call of this CallReport.


        :return: The unwanted_call of this CallReport.
        :rtype: bool
        """
        return self._unwanted_call

    @unwanted_call.setter
    def unwanted_call(self, unwanted_call):
        """
        Sets the unwanted_call of this CallReport.


        :param unwanted_call: The unwanted_call of this CallReport.
        :type: bool
        """
        self._unwanted_call = unwanted_call

    @property
    def call_time(self):
        """
        Gets the call_time of this CallReport.


        :return: The call_time of this CallReport.
        :rtype: datetime
        """
        return self._call_time

    @call_time.setter
    def call_time(self, call_time):
        """
        Sets the call_time of this CallReport.


        :param call_time: The call_time of this CallReport.
        :type: datetime
        """
        self._call_time = call_time

    @property
    def reporter(self):
        """
        Gets the reporter of this CallReport.


        :return: The reporter of this CallReport.
        :rtype: str
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """
        Sets the reporter of this CallReport.


        :param reporter: The reporter of this CallReport.
        :type: str
        """
        self._reporter = reporter

    @property
    def reporter_loation(self):
        """
        Gets the reporter_loation of this CallReport.


        :return: The reporter_loation of this CallReport.
        :rtype: ReporterLoation
        """
        return self._reporter_loation

    @reporter_loation.setter
    def reporter_loation(self, reporter_loation):
        """
        Sets the reporter_loation of this CallReport.


        :param reporter_loation: The reporter_loation of this CallReport.
        :type: ReporterLoation
        """
        self._reporter_loation = reporter_loation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

