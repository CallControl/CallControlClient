# coding: utf-8

"""
EnterpriseApiApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EnterpriseApiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def enterprise_api_get_block_list(self, **kwargs):
        """
        Enterprise  GET: GetBlockList\r\n            Simple Enteprise which returns the current and complete list of numbers that the network is blocking
        All \r\n            Try with api_key 'demo' for the demo block list (which will block 18008472911, 13157244022, 17275567300, 18008276655) but not 12061231234

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterprise_api_get_block_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool cached: 
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cached']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprise_api_get_block_list" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/2015-11-01/Enterprise/GetBlockList'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'cached' in params:
            query_params['cached'] = params['cached']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[str]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def enterprise_api_get_user(self, phone_number, **kwargs):
        """
        Enterprise  GET: GetUser\r\n            Returns the current information from the user
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterprise_api_get_user(phone_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str phone_number:  (required)
        :return: CallControlUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprise_api_get_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params) or (params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `enterprise_api_get_user`")

        resource_path = '/api/2015-11-01/Enterprise/GetUser/{phoneNumber}'.replace('{format}', 'json')
        path_params = {}
        if 'phone_number' in params:
            path_params['phoneNumber'] = params['phone_number']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CallControlUser',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def enterprise_api_should_block(self, phone_number, user_phone_number, **kwargs):
        """
        Enterprise  GET: ShouldBlock\r\n            Simple Enteprise which returns a call block proceed decision.
        This returns information required to perform basic call blocking behaviors\r\n            Try with api_key 'demo' and phone numbers 18008472911, 13157244022, 17275567300, 18008276655, and 12061231234 (last one not spam)

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterprise_api_should_block(phone_number, user_phone_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str phone_number: phone number to search (required)
        :param str user_phone_number: (OPTOPNAL) phone number of user to look up block rules (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number', 'user_phone_number']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprise_api_should_block" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'phone_number' is set
        if ('phone_number' not in params) or (params['phone_number'] is None):
            raise ValueError("Missing the required parameter `phone_number` when calling `enterprise_api_should_block`")
        # verify the required parameter 'user_phone_number' is set
        if ('user_phone_number' not in params) or (params['user_phone_number'] is None):
            raise ValueError("Missing the required parameter `user_phone_number` when calling `enterprise_api_should_block`")

        resource_path = '/api/2015-11-01/Enterprise/ShouldBlock/{phoneNumber}/{userPhoneNumber}'.replace('{format}', 'json')
        path_params = {}
        if 'phone_number' in params:
            path_params['phoneNumber'] = params['phone_number']
        if 'user_phone_number' in params:
            path_params['userPhoneNumber'] = params['user_phone_number']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def enterprise_api_upsert_user(self, user, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enterprise_api_upsert_user(user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CallControlUser user:  (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprise_api_upsert_user" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `enterprise_api_upsert_user`")

        resource_path = '/api/2015-11-01/Enterprise/UpsertUser'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user' in params:
            body_params = params['user']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
